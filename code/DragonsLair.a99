**************
* Dragon's Lair for the TI-99/4A - by M.Brent aka Tursi
* A big extension of my AV Playback code, as below
* Licensed by Digital Leisure - holy crap!
* A real licensed release of a major property in 2017... I mean 2018...
* I mean 2019. Damn it. ;)
**************
* AV Playback code - by m.brent aka Tursi
* F18A support added - will autodetect
* and play the appropriate version.
*
* Updated 11/4/2018 - now has more correct timing
* and reads QUIT and the Joystick
* F18A side also updated
* joystick support for fast forward/reverse
*
* Final Version:	
* Fixed for: sound chip timing
*            gigacart switching (16-bits worth - 512MB)
*
* Each frame has 6144 bytes of video, and 1544 bytes of audio.
* approximate output is: 
* 8.6458 fps and 13372 Hz (but audio is best calculated
* as (frames * 6144) = samples / duration = rate)
*
**************

** Cartridge page - >6000 for joystick and >6002 for keyboard
** this is used by all code that needs to return to the code page
CARTPAGE EQU >6000

SOUND   EQU >8400
VDPWA   EQU >8C02
VDPWD   EQU >8C00
VDPRD   EQU >8800
VDPST	EQU >8802

**
* Some graphic frame defines (hell with it... see ROM LAYOUT.txt)
*
CFGHEA	EQU >2a40		* first configuration screen page
*CFGENH	EQU 1			* enhanced adds '1' over arcade
*CFGHARD EQU 2			* hard adds '2' over easy
*CFGNOHINT EQU 4		* no hints adds '4' over hints
CFGPAT	EQU >6000		* where is the color data
CFGCOL	EQU >6C00		* where is the pattern data
CFGSIT 	EQU >7800		* where is the SIT (only care once, mind...)
CFGBORD EQU >2A3F		* border graphics
CFGF18	EQU >2a48		* F18A
CFGSPRITES EQU >2A4B	* sprite tables and patterns

* Hint sprite tables
HINTNONE EQU >8536
HINTUP EQU >8537
HINTDOWN EQU >8538
HINTLEFT EQU >8539
HINTRIGHT EQU >853A
HINTFIRE EQU >853B

    DEF MAIN
    
* TODO: HINT ARROWS (sprites are in)
* TODO: game itself of course... ;)
* TODO: Easy mode disables the death moves (that is, the valid mask matches the good mask)
* TODO: watch mode?

* TODO: keyboard mode:
*		-selected from GROM menu (done)
*		-lives on a different cartridge page (so we just return to that page instead (partially))
*		-columns 1 AND 2 are needed (ESDX, period for sword)
*		-No way to keep timing, I think, maybe just live with it?
* 		-Remember to check for and fix all the instruction screens that mention keyboard!
*		-also remember to fix both playback codes which assume >6000 for the return bank (6002 for key, partially)

* TODO: add game over screen (player one only (loaded))

* TODO: table layout...
* I am probably NOT going to be able to store everything in the 8k program space,
* so, copying one row from banked memory into scratchpad or VDP may be needed.
* start frame, frame count (byte), death? (byte), valid joystick (byte), good joystick (byte), 
* hint sprites, good scene, bad scene, timeout scene, score
*
* start frame - the page index of the first frame
* frame count - the number of frames in the clip
* death?      - if zero, survive after clip, else this is a death clip
* valid joyst - the mask of joystick bits to test for
* good joyst  - submask of valid joystick bits that indicate success (if not in here, then death)
* hint sprite - the address of the sprite table (ready to write to VDP) if hints are on
* good scene  - the next scene to play on success (if 0, end of sequence)
* bad scene   - the next scene to play on failure
* timeout sc  - the next scene to play after timeout
* score		  - score to add for this scene starting (stored the same 0-99 method as score is)
*
* 16 bytes per entry (for easy shifting)... approx 754 scenes, so 12k
* we'll allocate 2 pages for it (16K) and 16 bytes in scratchpad for the current one
    
******
* Scratchpad usage
* WARNING: init code takes advantage of this packing
******
* 8300-831f	Registers
* 8320-83d7	misc code (playback, paging, etc)
* ...
* 83EB		just died? (BYTE)
* 83EC-83ED scenebase
* 83EE-83EF rowbase
* 83F0-83F1 beepvol
* 83F2-83F3 save3 (WORD)
* 83F4	 	arcade(BYTE)
* 83F5		hard  (BYTE)
* 83F6		hints (BYTE)
* 83f7		f18a flag (true or 0) (BYTE)
* 83F8      lives (BYTE)
* 83f9-83fb	score (3 BYTES)
* 83fc-83fd	save  (WORD)
* 83fe-83ff	save2 (WORD)
******

justdied equ >83EB
scenebase equ >83EC
rowbase equ >83ee
BEEPVOL equ >83F0	* used to make the joystick accept beep on channel 2
SAVE3 equ >83F2
cfgarcade equ >83f4	 * non-zero if arcade order instead of enhanced
cfghard	equ >83f5	* non-zero if hard mode instead of easy
cfghints equ >83f6	* non-zero if hints should be shown
f18aflg equ >83f7	* non-zero if F18A detected (test with movb)
lives equ >83f8		* lives remaining
scr1 equ >83f9		* 3 bytes of score in sort-of BCD - see above
scr2 equ >83fa
scr3 equ >83fb
SAVE EQU >83FC
SAVE2 EQU >83FE
	
* number of lives
liveasy equ 5
livhard equ 3

* register equates (all bits are active high)
* the newly read bits from the joystick (set for one frame)
JOYDAT EQU 4
* the last read bits from the joystick (continuous)
JOYOLD EQU 5
* a mask of bits that should immediately exit the scene
JOYMASK EQU 6

* joystick bits:
JOYUP EQU >1000
JOYDOWN EQU >0800
JOYLEFT EQU >0200
JOYRIGHT EQU >0400
JOYFIRE EQU >0100

    AORG >6000

* cart header - >600A receives the bank to loop at
* Note: for gigacart we use GROM startup instead... so '55' instead of 'aa' to mask it
        DATA >5501,>0200,>0000,PROG1
QUITK        
        DATA >1100		* reusing this useless pointer for QUIT detection
* subprogram pointer, invalid for ROM, unused now...
        DATA >0174
PROG1   DATA >0000,MAIN,>0A4D
        TEXT 'OVIE TEST'
        EVEN

* MAIN must be at >601C - if you change it, change the GPL too
MAIN
    CLR @CARTPAGE   * even though this bank doesn't need it, needs to be the same on all banks

* this should be at >6020 to make all banks line up 
    LIMI 0
    LWPI >8300
    
*   * set up sound chip
    LI R0,>9FBF     * mute all channels
    MOVB R0,@SOUND
    SWPB R0
    MOVB R0,@SOUND
    LI R0,>DFFF
    MOVB R0,@SOUND
    SWPB R0
    MOVB R0,@SOUND
    LI R0,>8100     * highest frequency
    MOVB R0,@SOUND
    SWPB R0
    MOVB R0,@SOUND
    LI R0,>C004		* beep frequency on ch 3 (no buzz?)
    MOVB R0,@SOUND
    SWPB R0
    MOVB R0,@SOUND
	LI R0,>DFD8		* beep volumes
	MOV R0,@BEEPVOL
    
* setup some persistent variables
	CLR @cfgarcade		* also clears cfghard
	clr @cfghints		* also clears f18aflg, but we check that below
	clr @lives			* also clears scr1
	clr @scr2			* also clears scr3
    
* test for F18A, and unlock. 
* run 9918A version if it's not there.

* if user is holding shift, then skip F18A test and run without
	LI R12,>0024
	CLR R1
	LDCR R1,3
	NOP
	LI R12,>0010
	TB 0			* is shift pressed?
	JNE F18NO		* if so, skip the GPU test

* We just check if the GPU is present by having it 
* run a short program
* F18A blind unlock code
    LI R0,>B91C             * VR1/57, value 00011100
    BL @VDPWTA              * write once (corrupts VDPR1)
    BL @VDPWTA              * write again (unlocks enhanced mode)

* If we are not on the F18A, then R1 is screwed up now, that's okay
    LI R0,>5C00
    BL @VDPWTA
    LI R1,GPUTEST
    LI R2,10
TSTLP
    MOVB *R1+,@VDPWD        * copy program
    DEC R2
    JNE TSTLP
    
    LI R0,>5C10             * test address
    BL @VDPWTA
    CLR @VDPWD              * clear it
    CLR @VDPWD
    
* Start the GPU program, pause, then check the result
    LI R0,>B61C             * MSB
    BL @VDPWTA
    LI R0,>B700             * LSB and start
    BL @VDPWTA
    NOP                     * give it a moment - it's WAY faster than we are
    LI R0,>1C10
    BL @VDPWTA
    NOP
    MOVB @VDPRD,R1          * read the data
    SWPB R1
    MOVB @VDPRD,R1
    CI R1,>3412
    JNE F18NO
    B @F18YES

F18NO   
*   * set up bitmap
    BL @BITMAP
    CLR R0
    MOVB R0,@f18aflg
    B @GAMESTART

** Video playback here. Pass in:
** R6 - JOYMASK
** R7 - number of frames in clip
** R8 - page to start at
**
VIDNOF18
* save return
	MOV R11,@SAVE2
	
* Now copy from OUTLOOP to FINAL into scratchpad
* at >8320 - we'll run from there so that paging
* doesn't bite us (although there is room in each
* video page for this code...)
    LI R0,>8320
    LI R1,OUTLOOP
CPLP1
    MOV *R1+,*R0+
    CI R1,FINAL
    JL CPLP1
    
* set up copy

* We /could/ get away with 3 blocks, and I did that originally.
* The idea of using four is to interleave the painting more so
* pattern updates are more closely followed by color udpates.
* it causes more obvious paints, but this looks better than the flicker.
*
* With the discovery that LI is faster than MOV in scratchpad,
* I've freed up all the fixed value registers that were used only to init
*

* Convert R8 (page number) into R8/R9 (address/data)
	MOV r8,r9
	SRL R9,4
	ANDI R9,>0F00
	ANDI R8,>0FFF
	SLA R8,1
	AI R8,>6000

* Loop point
LOOP4EVR

*	R0 is reserved for scratch
*	R1 is reserved for scratch
*	R2 is used for joystick calculations
*   R3 is used (on F18A side only) to hold the VDP address
    CLR R4			* R4 is reserved for JOYDAT
    CLR R5			* R5 is reserved for JOYOLD
*   LI R6,>0700		* R6 is reserved for JOYMASK (left,right,fire)
*	MOV @FRAMES,r7
*   li r8,>6002     * address for paging
*   clr r9          * data for paging
    li r10,>6020	* address we are reading from
*   R11 reserved for BL
	LI R12,>0006    * fixed for CRU access to keyboard and joystick (columns at 15,16,17)
    LI r13,VDPWD
    li r14,VDPWA
    li r15,SOUND
    SBZ 15			* first bit of keyboard select is always 0, only need to change 16&17
    
*
* try to keep the cycles between sound writes about even
* the setup blocks need to be 2 cycles longer than the copy blocks
* to make up for the JNE fallthrough being 2 cycles shorter.
*
* Although the smaller code needs fewer bytes to VDP, to keep the
* code reasonably tight, we now need SIX copy loops.
* 
* The data pattern needs to be (P=PATTERN, C=COLOR, S=Sound):
* 1     S
* 192   PPPPS   first 1/3rd, chars 0-95
* 1     S
* 192   CCCCS
* 1     S
* 192   PPPPS   second 1/3rd, chars 0-95
* 1     S
* 192   CCCCS
* 1     S
* 192   PPPPS   second 1/3rd, chars 96-191
* 1     S
* 192   CCCCS
* 1     S
* 192   PPPPS   third 1/3rd, chars 0-95
* 1     S
* 192   CCCCS
*
* Repeat - above sequence is first pattern data, then color data (color at >2000)
* We are interleaving the pattern and color through each table
*
*                                                  8Bit 16bit 

* So go to 'er!
    B @>8320
    
* absolute return point, so we don't need to save R11
* When we get here, JOYDAT has the newly detected joystick data
* JOYOLD has the joystick data ('1' is active)
* if R7 is >FFFF, then the video has played out
* (After we increment, it's if R7 is zero)
ABSRET
	INC R7
	JEQ NOBEEP
	MOVB @BEEPVOL+1,@SOUND
NOBEEP
	MOV @SAVE2,R11
	B *R11

**********************************
* Code for quit, joystick, and frame countdown are interleaved with the
* frames, with the intent of keeping the audio properly spaced.
* Despite my best attempts to cycle count, in the end I just
* removed the delays and pushed it as best I could.
* original goal was 220 cycles between samples, final result was
* to get as close as possible to what the main loop achieves, which
* is about 218 cycles. Luckily there are 192 loops of tight copies,
* and then the blocks below which are a bit off. This means I made
* the delay blocks as close as possible to 48 cycles, but the reality
* is that 40 cycles is actually closer to correct.
**********************************

* follow code is copied to >8320 and run from scratchpad
* can enable this AORG to get the scratchpad address of LOOP1X
* AORG >8320
OUTLOOP

* increment page, and prepare the address to copy from (10 jmp to here)
    MOV r9,*R8+                                     30
    LI R10,>6020                                    12  - 52 cycles (12 cycles over)

* Pattern 1 
    LI R0,>0040     * start address table 1 >0000   12
    BL @LOOP1                                       20

* check page increment
    CI R8,>8000                                     14  - check for end of cart space
    JNE NOTLP                                       10  - continue if not there yet
    LI R8,>6002                                     ...12 - else reset and
    AI R9,>0100                                     ...10 - increment data
NOTLP   
	SBZ 16											12
	SBZ 17											12 - set QUIT column - 48 cycles (8 cycles over)

* Color 1
    LI R0,>0060     * start address table 3 >2000   12
    BL @LOOP1                                       20
    
* check for end of video
	DEC R7											10
	JOC NOTYET										10
	CLR @CARTPAGE                                   ...26 (reset cartridge bank for code jump)
	B @ABSRET										...16-2 for branch, but we are looping
NOTYET
* read the FCTN and EQUALS keys
	TB 0											12 (equals)
	JEQ KEYOK										10
	TB 4											...12 (fctn)
	JEQ KEYOK										...10
	CLR @CARTPAGE                                   ......26 (reset cartridge bank for code jump)
	B @REBOOT										......16-2 (but who cares, we're rebooting)
KEYOK
*	         										  - 42 cycles (2 cycles over)
*                                                      (22 over if equals down, count not calculated on repeat)

* Pattern 2
    LI R0,>0048     * start address table 2 >0800   12
    BL @LOOP1                                       20
    
* prepare joystick read
	SBO 16                                          12
	SBO 17                                          12 - select column 6
* delay
    SRL R0,2                                        16 - 40 cycles

* Color 2
    LI R0,>0068     * start address table 4 >2800   12
    BL @LOOP1                                       20

* read the joystick lines
	STCR JOYDAT,8								    44 - 44 cycles (4 over)

* Pattern 2b
    LI R0,>004B     * start address table 5 >0B00   12
    BL @LOOP1                                       20

* check joystick results
	mov JOYDAT,r2	                                14 - make a copy to work on
	mov JOYDAT,r2	                               	14 - waste time
	inv JOYDAT		                                10 - invert the bits - 38 cycles (2 short)

* Color 2b
    LI R0,>006B     * start address table 7 >2B00   12
    BL @LOOP1                                       20

* continue processing joystick data
	xor JOYOLD,JOYDAT                               14 - xor with old to get changed
	szc r2,JOYDAT	                                14 - and to get only newly active bits (ignore released)
	inv r2			                                10 - prepare to save off new 'old' - 38 cycles (2 short)

* Pattern 3
    LI R0,>0050     * start address table 6 >1000   12
    BL @LOOP1                                       20

* finish processing the joystick, including early exit check
	mov r2,JOYOLD	                                14
	czc JOYMASK,JOYDAT                              14
	jeq JOYOK		                                10 - normal case, we do not exit!
	CLR @CARTPAGE                                   ...26 (reset cartridge bank for code jump)
	B @ABSRET                                       ...16 (joystick told us to exit)
JOYOK
*                                                      - 38 cycles (2 short)

* Color 3
    LI R0,>0070     * start address table 8 >3000   12
    BL @LOOP1                                       20

* back to the top!
    JMP OUTLOOP                                     10
    
* this is the actual copy block - VDP address in R0, which is destroyed
LOOP1X
*                                                   42 (init & BL & RT + 48 cycles wasted in callers)
    MOVB R0,*R14                                    26
	MOVB @>8301,*R14								34 (R0 LSB)
    LI R0,192                                       12
*   MOVB *R10+,*R15   * write sound                 62  -   224 (6 over, when 48 cycles are used)
	INC R10				* discard one cart sample	10
	MOVB @BEEPVOL,*R15	* beep tone					54	-	226 (8 over, when 48 cycles are used)

* This loop executes 192 times, then ONE of the other paths happens, so the slight
* miscounts are not too easily noticed.
LOOP1Y
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R15   * write sound                 62  -   218 (including dec and jne)
    DEC R0                                          10
    JNE LOOP1Y                                      10
    
    B *R11                                          12 (-2 for JNE fallthrough)
FINAL

*************** 
*************** F18A Version
*************** 

F18YES  
* good, copy the GPU program in and start it
    LI R0,>5B80
    BL @VDPWTA
    LI R1,GPUGO
GLDLP
    MOVB *R1+,@VDPWD
    CI R1,GPUEND
    JNE GLDLP
    
* start running (it will move itself into high memory)
    LI R0,>B61B             * MSB
    BL @VDPWTA
    LI R0,>B780             * LSB and start
    BL @VDPWTA
    
*   * set up bitmap
    BL @BITMAP
    SETO R0
    MOVB R0,@f18aflg
    B @GAMESTART

** Video playback here. Pass in:
** R6 - JOYMASK
** R7 - number of frames in clip
** R8 - page to start at
**
VIDYESF18
* Save the return address
	MOV R11,@SAVE2

* Now copy from OUTLOOP18 to FINAL18 into scratchpad
* at >8320 - we'll run from there so that paging
* doesn't bite us (although there is room in each
* video page for this code...)
    LI R0,>8320
    LI R1,OUTLOOP18
CPLP118
    MOV *R1+,*R0+
    CI R1,FINAL18
    JL CPLP118
    
* Theory of op:
* This uses 4 copies like the original code, and has the same
* timing and tearing limitations. The difference is that
* each block is copied to 'unused' video RAM, and a command
* written to the polling GPU program.
* The GPU then copies the block as instructed.
* First, the CPU writes the pattern table, then toggles the
* GPU. The GPU copies the pattern data to a block in high
* memory (mostly because we're out of memory in the main
* VDP space, and we can afford the time).
* The CPU then (possibly starting overlapped) copies the
* color table to the buffer. The command next written
* instructs the GPU to copy both pattern and color to the
* correct place for display. Because the GPU has random access
* to VDP memory, it can alternate writes for minimum time
* between updates. Because it's so blinding fast, it should
* easily finish the update before the next block is ready.
* the result should be nearly flicker-free video.
*

* Convert R8 (page number) into R8/R9 (address/data)
	MOV r8,r9
	SRL R9,4
	ANDI R9,>0F00
	ANDI R8,>0FFF
	SLA R8,1
	AI R8,>6000

* loop repeat point for F18A
LOOP418

* So, the 9900 always writes starting at >1B80,
* it then writes one extra byte to >1E80, containg a GPU
* command:
* 0x80  -   copy to second buffer
* 0x20  -   copy first blocks
* 0x28  -   copy second blocks
* 0x2B  -   copy third blocks
* 0x30  -   copy fourth blocks

*	R0 is reserved for scratch
*	R1 is reserved for scratch
*	R2 is used for joystick calculations
*   R3 is used (on F18A side only) to hold the VDP address
	LI R3,>805B		* address of VDP buffer (>1B80)
    CLR R4			* R4 is reserved for JOYDAT
    CLR R5			* R5 is reserved for JOYOLD
*   LI R6,>0700		* R6 is reserved for JOYMASK (left,right,fire)
*	MOV @FRAMES,r7
*   li r8,>6002     * address for paging
*   clr r9          * data for paging
    li r10,>6020	* address we are reading from
*   R11 reserved for BL
	LI R12,>0006    * fixed for CRU access to keyboard and joystick (columns at 15,16,17)
    LI r13,VDPWD
    li r14,VDPWA
    li r15,SOUND
    SBZ 15			* first bit of keyboard select is always 0, only need to change 16&17
    
* So go to 'er!
    B @>8320
	
**********************************
* following code is copied to >8320 and run from scratchpad
* it's unfortunate we need an F18A version, but the minor
* changes are worth it, to keep performance up.
**********************************
* can enable this AORG to get the scratchpad address of LOOP18X
* AORG >8320

OUTLOOP18
* increment page, and prepare the address to copy from (10 jmp to here)
    MOV r9,*R8+                                     30
    LI R10,>6020                                    12  - 52 cycles (12 cycles over)

* Pattern 1
    LI R0,>8000     * command address table         12
    BL @LOOP18                                      20

* check page increment
    CI R8,>8000                                     14  - check for end of cart space
    JNE NOTLP18                                     10  - continue if not there yet
    LI R8,>6002                                     ...12 - else reset and
    AI R9,>0100                                     ...10 - increment data
NOTLP18   
	SBZ 16											12
	SBZ 17											12 - set QUIT column - 48 cycles (8 cycles over)

* Color 1
    LI R0,>2000     * command copy first blocks     12
    BL @LOOP18                                      20

* check for end of video
	DEC R7											10
	JOC NOTYET18   									10
	CLR @CARTPAGE                                   ...26 (reset cartridge bank for code jump)
	B @ABSRET										...16-2 for branch, but we are looping (shared return)
NOTYET18
* read the FCTN and EQUALS keys
	TB 0											12 (equals)
	JEQ KEYOK18										10
	TB 4											...12 (fctn)
	JEQ KEYOK18										...10
	CLR @CARTPAGE                                   ......26 (reset cartridge bank for code jump)
	B @REBOOT										......16-2 (but who cares, we're rebooting)
KEYOK18
*	         										  - 42 cycles (2 cycles over)
*                                                      (22 over if equals down, count not calculated on repeat)

* Pattern 2
    LI R0,>8000     * command address table         12
    BL @LOOP18                                      20

* prepare joystick read
	SBO 16                                          12
	SBO 17                                          12 - select column 6
* delay
    SRL R0,2                                        16 - 40 cycles
    
* Color 2
    LI R0,>2800     * command copy second blocks    12
    BL @LOOP18                                      20

* read the joystick lines
	STCR JOYDAT,8								    44 - 44 cycles (4 over)

* Pattern 2b
    LI R0,>8000     * command address table         12
    BL @LOOP18                                      20

* check joystick results
	mov JOYDAT,r2	                                14 - make a copy to work on
	mov JOYDAT,r2	                               	14 - waste time
	inv JOYDAT		                                10 - invert the bits - 38 cycles (2 short)

* Color 2b
    LI R0,>2B00     * command copy third blocks     12
    BL @LOOP18                                      20
    
* continue processing joystick data
	xor JOYOLD,JOYDAT                               14 - xor with old to get changed
	szc r2,JOYDAT	                                14 - and to get only newly active bits (ignore released)
	inv r2			                                10 - prepare to save off new 'old' - 38 cycles (2 short)

* Pattern 3
    LI R0,>8000     * command address table         12
    BL @LOOP18                                      20

* finish processing the joystick, including early exit check
	mov r2,JOYOLD	                                14
	czc JOYMASK,JOYDAT                              14
	jeq JOYOK18		                                10 - normal case, we do not exit!
	CLR @CARTPAGE                                   ...26 (reset cartridge bank for code jump)
	B @ABSRET                                       ...16 (joystick told us to exit)
JOYOK18
*                                                      - 38 cycles (2 short)

* Color 3
    LI R0,>3000     * command copy fourth blocks    12
    BL @LOOP18                                      20

* back to the top!
    JMP OUTLOOP18                                   14  10

* this is the actual copy block 
* pass the command byte in R0, R1 is destroyed (unlike the non-F18A version which takes and destroys R0)
LOOP18X
*                                                   42 (init & BL & RT + 48 cycles wasted in callers)
    MOVB R3,*R14                                    26
    MOVB @>8307,*R14								34 (R3 LSB)
    LI R1,192                                       12
*   MOVB *R10+,*R15     * write sound               62  -   224 (6 over, when 48 cycles are used)
	INC R10				* discard one cart sample	10
	MOVB @BEEPVOL,*R15	* beep tone					54	-	226 (8 over, when 48 cycles are used)

* This loop executes 192 times, then ONE of the other paths happens, so the slight
* miscounts are not too easily noticed.
LOOP18Y
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R13   * data                        34
    MOVB *R10+,*R15   * write sound                 62  -   218 (including dec and jne)
    DEC R1                                          10
    JNE LOOP18Y                                     10
    
    MOVB R0,*R13									26	- command byte - makes us 26 more over
    B *R11

FINAL18

* back refs for the Scratchpad address of the loops
LOOP1   EQU LOOP1X-OUTLOOP+>8320
LOOP18  EQU LOOP18X-OUTLOOP18+>8320

* GPU code (loads at >1B80 in VDP, copies itself to >4000)
* to make life easy, position independent code! (VDP
* addresses are hard coded though, that's fine)
GPUGO
    li r0,>1B80+GPURUN-GPUGO
    li r1,>4300
GCPLP
    MOV *r0+,*r1+
    ci r0,>1b80+GPUEND-GPUGO
    jne GCPLP

* now jump to it!   
    B @>4300
    
* this code running at >4300
GPURUN
    clr @>1E80      * zero command
    CLR R0
GPUWAIT
    MOVB @>1E80,R0  * get it
    JEQ GPUWAIT     * nothing yet
    CLR @>1E80      * clear it
    JLT BUFCPY      * copying to second buffer
    
* main buffer copy - copy >4000 to pattern, and >1B80 to color
* R0 contains the color table target address
    MOV R0,R1       * for pattern table
    ANDI R1,>1FFF
    LI R2,>1B80     * R2->R0 for the color table
    LI R3,>4000     * R3->R1 for the pattern table
    LI R4,96        * we can move words instead of bytes
GPUVLP  
    MOV *R2+,*R0+
    MOV *R3+,*R1+
    MOV *R2+,*R0+
    MOV *R3+,*R1+
    MOV *R2+,*R0+
    MOV *R3+,*R1+
    MOV *R2+,*R0+
    MOV *R3+,*R1+
    DEC R4
    JNE GPUVLP
    JMP GPURUN      * go wait again

BUFCPY
    LI R0,>1B80     * 9900 write buffer
    LI R1,>4000     * second buffer target when >80
    LI R2,96        * we can move words instead of bytes
GPUBLP
    MOV *R0+,*R1+
    MOV *R0+,*R1+
    MOV *R0+,*R1+
    MOV *R0+,*R1+
    DEC R2
    JNE GPUBLP
    JMP GPURUN      * go wait again

GPUEND

* GPU TEST must be 10 bytes... (copied and run on F18A GPU)
GPUTEST
    LI R0,>1234
    MOV R0,@>1C10
    IDLE

* Setup for normal 0 mode
* returns with video off - set VDP R1 to E2 to enable (>81E2)
BITMAP
    MOV R11,@SAVE

* set display and disable sprites
    LI R1,BMREGS
    BL @LOADRG
    
* set up SIT - copy from first graphic frame
    LI R0,>5800
    LI R1,CFGSIT
    LI R2,768
    LI R3,CFGHEA	* frame to copy from
    BL @VMBWP
    
* now it takes a few loops to copy in the
* color and pattern data, they are spaced
* Pattern is packed first (unlike the video stills)
* set up PATTERN - (R1 already set)
* chars 0x60-0xff
    LI R0,>4300
    LI R1,CFGPAT
    LI R2,160*8
    LI R3,CFGBORD
    BL @VMBWP
    
* chars 0x1C0-0x1FF (R1 already set)
	LI R0,>4E00
	LI R2,64*8
    LI R3,CFGBORD
	BL @VMBWP
	
* chars 0x260-0x2FF (R1 already set)
	LI R0,>5300
	LI R2,160*8
    LI R3,CFGBORD
	BL @VMBWP

* set up COLOR (R1 is already set)
* chars 0x60-0xff
    LI R0,>6300
    LI R2,160*8
    LI R3,CFGBORD
    BL @VMBWP
    
* chars 0x1C0-0x1FF (R1 already set)
	LI R0,>6E00
	LI R2,64*8
    LI R3,CFGBORD
	BL @VMBWP
	
* chars 0x260-0x2FF (R1 already set)
	LI R0,>7300
	LI R2,160*8
    LI R3,CFGBORD
	BL @VMBWP
	
* set up sprite tables (will overwrite existing byte)
	LI R0,>5B00		* SAL (blank), all data will follow (see sprites.a99)
	LI R1,>6000
	LI R2,>0290
	LI R3,CFGSPRITES
	BL @VMBWP

* back to caller    
    MOV @SAVE,R11
    B *R11
	
* VMBWP via a page - corrupts scratchpad at >8320	
* R0 - VDP address (with >4000 set)
* R1 - src address (register saved but incremented)
* R2 - count
* R3 - video page to copy from (as in ROM LAYOUT.txt)
VMBWP
	MOV R11,@SAVE2 		* frees R11
	BL @VDPWTA	   		* set VDP address - frees R0
* copy the code into scratchpad
	LI R11,VMBWPA  		* R11 is free to reuse
	LI R0,>8320	   		* R0 is free to reuse
VMBCP1	
	MOV *R11+,*R0+
	CI R11,VMBWPE
	JNE VMBCP1
* Get the banking info ready (convert index into page and data)
	MOV r3,r0	   		* r0 is free to reuse
	SRL R0,4
	ANDI R0,>0F00
	ANDI R3,>0FFF
	SLA R3,1
	AI R3,>6000
* Do the actual copy
	BL @>8320
* and back to caller	
	MOV @SAVE2,R11
	B *R11
	
VMBWPA
* Entry here at >8320. R3 has page address, R0 has page data in MSB
	MOV R0,*R3
LPA2
	MOVB *R1+,@>8C00
	DEC R2
	JNE LPA2
	CLR @CARTPAGE
	B *R11
VMBWPE

* registers for bitmap (and 5B00 is the write address of the sprite table)
* background is transparent (the only color never redefined)
* PDT - >0000
* SIT - >1800
* SDT - >1800
* CT  - >2000
* SAL - >1B00
BMREGS DATA >81E3,>8002,>8206,>83ff,>8403,>8536,>8603,>8700,>5B00,>0000

* load regs list to VDP address, end on >0000 and write >D0 (for sprites)
* address of table in R1 (destroyed)
LOADRG
LOADLP
    MOV *R1+,R0
    JEQ LDRDN
    SWPB R0
    MOVB R0,@>8C02
    SWPB R0
    MOVB R0,@>8C02
    JMP LOADLP
LDRDN
    LI R1,>D000
    MOVB R1,@>8C00
    B *R11

* Write address or register
VDPWTA
    SWPB R0
    MOVB R0,@>8C02
    SWPB R0
    MOVB R0,@>8C02
    B *R11  

* clean up scratchpad so we can safely reboot
REBOOT
* reset F18A
	BL @RESTF18
	BL @LOCKF18
* wipe scratchpad	
	LI R0,>8304
	LI R1,252
RBLP1
	CLR *R0+
	DECT R1
	JNE RBLP1
* soft reset of console	
	BLWP @>0000
	
**
* RESTF18 - Reset the GPU on the F18 (no harm if not F18, 
* but expect registers to be messed up)	
* We don't use palettes, so removed that code
RESTF18
	MOVB @f18aflg,R0		* do nothing if no F18A
	JNE RESTG18
	B *R11

RESTG18	
	MOV R11,@SAVE2
	
* stop the GPU and then Reset (no harm if it's not F18)
	LI R0,>B800				* stop the GPU -- this does stop the GPU
	BL @VDPWTA				* GPU will stop long before we're done

	MOV @SAVE2,R11
	B *R11
	
* lock F18 if it's still unlocked (pre 1.6)
LOCKF18
	MOV R11,@SAVE2

* reset the F18A to defaults (except palette, requires 1.6)	
	LI R0,>B280				* VR2/50, value 10000000
	BL @VDPWTA				* reset and lock F18A, or corrupt R2
	
	LI R0,>B900       		* VR1/57, value 00000000
	BL @VDPWTA          	* write once (corrupts VDPR1)
	
	MOV @SAVE2,R11
	B *R11	
	
**********************
* More subroutines! so unorganized!
**********************
* Corrupts R12,R13 - only checks for S,D,H or 5
* S	row 1, address >10 - return 1
* D	row 2, address >10 - return 2
* H	row 4, address >08 - return 4
* 5 row 4, address >0E - return 8
KSCAN
		LI R13,>0100
		LI R12,>0024		* column select
		LDCR R13,3
		SRC R12,7			* Delay?
		LI R12,>0010		* row select
		TB 0
		JEQ KEYNS
		LI R13,>0100
		B *R11
KEYNS
		LI R13,>0200
		LI R12,>0024		* column select
		LDCR R13,3
		SRC R12,7			* Delay?
		LI R12,>0010		* row select
		TB 0
		JEQ KEYND
		LI R13,>0200
		B *R11
KEYND
		LI R13,>0400
		LI R12,>0024		* column select
		LDCR R13,3
		SRC R12,7			* Delay?
		LI R12,>0008		* row select
		TB 0
		JEQ KEYNH
		LI R13,>0400
		B *R11
KEYNH
		TB 3
		JEQ KEYN5
		LI R13,>0800
		B *R11
KEYN5
		CLR R13
		B *R11

* VSMW - VDP Single Byte Multiple Write
* VDP - R0 (with >4000 set)
* Byte- R1 MSB
* Cnt - R2
VSMW
	MOV R11,@SAVE2
	BL @VDPWTA	   		* set VDP address - frees R0
VSMW1
	MOVB R1,@VDPWD
	DEC R2
	JNE VSMW1
	MOV @SAVE2,R11
	B *R11

* Fast joystick read with fire - kills R12 and R10, uses JOYDAT
* blocking, too, there's a NOP
* also checks for QUIT
JOYFAST
* check QUIT (same code as console ROM)
	LI 12,>0024 		* Load CRU
	LDCR @>0012,3
	SRC 12,7			* delay
	LI 12,>0006
	STCR R10,8 			* Fetch CRU
	CZC @QUITK,R10 		* QUIT key?
	JNE MENUKY
	B @REBOOT			* reboot if yes
MENUKY
* read joystick
	li r12,>0024
	li r10,>0600
	ldcr r10,3
	NOP
	li r12,>0006
	stcr JOYDAT,8
	INV JOYDAT			* make sure '1' bits are active
	B *R11
	
* set the color table for video to black
BLACKVID
	MOV R11,@SAVE3
	
	LI R0,>6000
	CLR R1
	LI R2,768
	BL @VSMW
	
	LI R0,>6800
	LI R2,1536
	BL @VSMW
	
	LI R0,>7000
	LI R2,768
	BL @VSMW
	
	MOV @SAVE3,R11
	B *R11

* same as SHOWANDPAUSE below without the blackvid call, for the options screen
SHOWANDPAUSE2
	MOV R11,@SAVE
	MOV R0,R9		* src page
	MOV R1,R13
	JMP SAPCONT
	
* shows a frame from R0 and waits for R1 frames
* also kills R9,R10,R12,R13,JOYDAT....
* must be possible to abort with fire button (but not HOLDING fire)
SHOWANDPAUSE
	MOV R11,@SAVE
	MOV R0,R9		* src page
	MOV R1,R13
	
* first black the color table to avoid corruption
	BL @BLACKVID

SAPCONT	
* now load the new image
	LI R0,>4000		* pattern
	LI R1,CFGPAT
	LI R2,768
	MOV R9,R3
	BL @VMBWP
	
	LI R0,>4800
	LI R2,1536
	MOV R9,R3
	BL @VMBWP
	
	LI R0,>5000
	LI R2,768
	MOV R9,R3
	BL @VMBWP
	
	LI R0,>6000		* color
	LI R2,768
	MOV R9,R3
	BL @VMBWP
	
	LI R0,>6800
	LI R2,1536
	MOV R9,R3
	BL @VMBWP
	
	LI R0,>7000
	LI R2,768
	MOV R9,R3
	BL @VMBWP

	MOV @SAVE,R11
* fall into delay	
	
* delay for R13 frames, allow exit on fire	
DELAY	
	MOV R11,@SAVE
	BL @JOYFAST
	ANDI JOYDAT,JOYFIRE		* FIRE key (save current status)
	MOV JOYDAT,JOYOLD
	MOVB @VDPST,R11			* clear VDP status

DELLP
	BL @JOYFAST
	ANDI JOYDAT,JOYFIRE		* only fire
	C JOYDAT,JOYOLD			* check for change
	JEQ DELSKIP				* no change
	MOV JOYDAT,JOYOLD		* backup, and test for zero
	JNE DELDONE				* if it's pressed

DELSKIP	
	CLR R12					* set CRU base (doesn't need to be in loop, but provides delay)
	TB 2 					* check VDP interrupt input
	JEQ DELLP				* if not set, keep waiting
	MOVB @VDPST,R11	  		* reset status
	DEC R13
	JNE DELLP

DELDONE	
	MOV @SAVE,R11
	B *R11
	
***
* Handle a single video clip until it returns (does F18A test)
** R6 - JOYMASK
** R7 - number of frames in clip
** R8 - page to start at
*
VIDEO
	MOV R11,@SAVE

* check for F18A or not
	MOVB @f18aflg,r0
	jeq nof18vid
	
	bl @VIDYESF18
	jmp donevid
	
nof18vid
	bl @VIDNOF18
	
donevid
	MOV @SAVE,R11
	B *R11
	
showscore
* show score (kind of BCD-ish, each byte is 0-99)
* digits in segment 3 are characters 167 (A7) on top and add 32 for bottom
* space is 177 (B1)
* score starts at >1AA7
* lives is at >1AB7
	LI R0,>A75A
	MOVB R0,@VDPWA
	SWPB R0
	MOVB R0,@VDPWA
	CLR R1			* have to just once
	
	MOVB @scr1,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD
	
	MOVB @scr2,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD
	
	MOVB @scr3,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD
	
	LI R0,>C75A			* second row
	MOVB R0,@VDPWA
	SWPB R0
	MOVB R0,@VDPWA
	
	MOVB @scr1,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	AI R0,>2020
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD
	
	MOVB @scr2,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	AI R0,>2020
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD
	
	MOVB @scr3,@>8303	* R1 LSB
	SLA R1,1		* multiply by 2
	MOV @BCDLOOKUP(R1),R0
	AI R0,>2020
	MOVB R0,@VDPWD
	SWPB R0
	MOVB R0,@VDPWD

	B *R11
	
showlives
* show lives (0-5)
	LI R0,>B75A
	MOVB R0,@VDPWA
	SWPB R0
	MOVB R0,@VDPWA
	
	MOVB @lives,R1
	AI R1,>A700
	MOVB R1,@VDPWD
	
	LI R0,>D75A
	MOVB R0,@VDPWA
	SWPB R0
	MOVB R0,@VDPWA
	
	AI R1,>2000
	MOVB R1,@VDPWD

	B *R11
	
* add the score value in R0 to score
* Score is a 24 bit value, stored not in BCD, but 0-99 per byte
* R0 is a 16-bit value stored in the same manner to make math easier
* Uses R1
ADDSCORE
	LI R1,100*256		* 100 bytes
	AB @>8301,@scr3		* R0 LSB
	cb @scr3,r1			* check for rollover
	jl adds1			* no rollover
	sb r1,@scr3			* subtract 100
	ab @BYTE01,r0		* deal with the carry
adds1
	ab r0,@scr2			* r0 msb
	cb @scr2,r1			* check for rollover
	jl adds2			* no rollover
	sb r1,@scr2			* subtract 100
	ab @BYTE01,@scr3	* increment the most significant score byte
adds2
	B *R11

*********************************************************
* Actual game code starting up here (post-init)
*********************************************************
GAMESTART

* run a simple attract mode
	
* if F18A is detected, then show that splash screen first
	MOVB @f18aflg,R0
	jeq nof18splash
	LI R0,CFGF18
	LI R1,120
	BL @SHOWANDPAUSE
nof18splash

* JOYSTICK ONLY - if Alpha lock is DOWN, then wait for release
	clr r12
	sbz >0015
	nop
	tb 7
	jeq AlphaUp
* Load warning screen
	LI R0,>2a5c
	LI R1,240
	BL @SHOWANDPAUSE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS
* wait for up or quit
AlphaDown
	SBO >0015
	BL @JOYFAST		* don't care what it reads, just using for QUIT
	CLR R12			* restore R12
	sbz >0015
	nop
	TB 7
	JNE AlphaDown
AlphaUp
	SBO >0015
** End alpha lock up for joystick routine

* harmlesslion presents
	LI R0,>2a4a
	LI R1,180
	BL @SHOWANDPAUSE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS
	
ATTRACT

* start video playback of the attract mode
* (which is hardcoded and loops atm...)
	LI JOYMASK,JOYFIRE
	LI R7,>0172			* attract mode frames
	LI R8,>0003			* attract mode starts at
	BL @VIDEO
	ANDI JOYDAT,JOYFIRE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS
	
* instructions 1 (joystick)
	LI R0,>2a4c
	LI R1,600
	BL @SHOWANDPAUSE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS

* instructions 2 (joystick)
	LI R0,>2a4e
	LI R1,240
	BL @SHOWANDPAUSE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS
	
* the license screen
	LI R0,>2a49
	LI R1,480
	BL @SHOWANDPAUSE
	MOV JOYDAT,JOYDAT
	JNE OPTIONS

* else loop back around
	JMP ATTRACT
	
* start the options screen up	
OPTIONS
	BL @BLACKVID
	MOVB @BEEPVOL,@SOUND	* mute beep
	
OPTDRAW	
	LI R0,CFGHEA		* base config page
	MOVB @cfgarcade,R1
	JNE OPT1
	AI R0,1				* ENHANCED adds 1 frame to base
OPT1
	MOVB @cfghard,R1
	JEQ OPT2
	AI R0,2				* HARD adds 2 frames to base
OPT2
	MOVB @cfghints,R1
	JNE OPT3
	AI R0,4				* HINTS add 4 frames to base
OPT3
	LI R1,1				* don't wait
	BL @SHOWANDPAUSE2	* get it up

* now we loop through the options, checking
* keyboard for cfg keys (H,S,D) and joystick fire
* KSCAN uses R12,r13 (return in R13). R14 will be old key.
* JOYFAST uses R12,JOYDAT and JOYOLD
	BL @KSCAN
	MOV R13,R14
	BL @JOYFAST
	ANDI JOYDAT,JOYFIRE
	MOV JOYDAT,JOYOLD

OPTLP
	BL @KSCAN
	C R13,R14		* changed?
	JEQ NONEWKEY
	MOV R13,R14		* remember change
	CI R13,>0100	* was it S?
	JNE NOKEYS
* Handle S
	MOVB @cfgarcade,r0
	inv r0
	movb r0,@cfgarcade
	jmp OPTDRAW

NOKEYS
	CI R13,>0200	* was it D?
	JNE NOKEYD
* Handle D
	MOVB @cfghard,r0
	inv r0
	movb r0,@cfghard
	jmp OPTDRAW
	
NOKEYD
	CI R13,>0400	* was it H?
	JNE NOKEYH	    * whatever
* handle H
	MOVB @cfghints,r0
	inv r0
	movb r0,@cfghints
	jmp OPTDRAW

NOKEYH
	CI R13,>0800	* was it 5? (Diagnostics)
	JNE NONEWKEY

	LI R0,>8320
	LI R1,GODIAG
	MOV *R1+,*R0+	* copy the code to scratchpad
	MOV *R1+,*R0+
	MOV *R1+,*R0+
	MOV *R1+,*R0+
	B @>8320		* and run it

GODIAG
	CLR @>6004		* select diagnostics bank
	B @>6000		* go run it

NONEWKEY
	MOV R13,R13		* any key pressed?
	JNE OPTLP		* yes, wait for release

* no key pressed, so check joystick
	BL @JOYFAST
	ANDI JOYDAT,JOYFIRE
	C JOYDAT,JOYOLD		* changed?
	JEQ OPTLP			* nope
	MOV JOYDAT,JOYOLD	* save new state
	JEQ OPTLP			* nothing pressed
	
* option screen exitted with fire -- start the game
	MOVB @BEEPVOL+1,@SOUND	* beep
	BL @BLACKVID
	
	CLR @lives			* and scr1
	clr @scr2			* and scr3

* set correct number of lives based on difficulty
	li r0,liveasy
	movb @cfghard,r0
	jeq nlivhard
	li r0,livhard
nlivhard
	swpb r0
	movb r0,@lives
	
	BL @showscore
	BL @showlives
	
	MOVB @BYTE01,@justdied	* so we play ressurrection
	MOVB @BEEPVOL,@SOUND	* mute beep
	
* TODO: init scene selection logic	
	
* AND START THE GAME... 

GAMELOOP
* TODO: maybe move the game play logic into a separate bank with the
*       scene data - even 1 page per scene. Then I wouldn't have to page
*       or cache data in RAM, it'll all be available.
* TODO: select the next scene and start it. Always drawbridge for now...

	LI R0,A1DRAWBRIDGE
	MOV R0,@scenebase
	
	MOVB @justdied,r0
	jeq notdied
	
* play ressurection sequence
	CLR JOYMASK
	MOV @scenebase,r1
	mov *r1+,r8			* starting page
	mov *r1,r7			* number of frames
	bl @video
	
* count down lives
	sb @byte01,@lives
	bl @showlives
	
* and clear the flag
	movb @byte00,@justdied

* continue here with the scene	
notdied
	bl @blackvid
	
* get the first scene
	mov @scenebase,r0
	ai r0,8
	mov r0,@rowbase
	
* loop here until scenes are done, one way or another	
scenelp

* first, add any score that is granted for reaching this scene
	mov @rowbase,r5
	mov @14(r5),r0
	bl @addscore
	bl @showscore
	
* Now get the joystick mask. If we're in easy mode, we'll later replace this
	clr JOYMASK
	movb @4(r5),JOYMASK
	
* now check for easy mode
	movb @cfghard,r1
	jne scenehard
	
* overwrite mask with only the success bits	
	movb @5(r5),JOYMASK
scenehard

* now check whether hints are on
	movb @cfghints,r1
	jeq scenenohints
	
* load up the appropriate table for the hints
	mov @6(r5),r0
	bl @vdpwta
scenenohints

* now finally load up the video parameters and go play it!
	clr r7
	movb @2(r5),r7
	swpb r7
	mov *r5,r8
	bl @video
	
* now we have returned
	mov @rowbase,r5	* get the base again
	
* we need to determine how the video ended
* (ie: by joystick or by frames)
	mov r7,r7				* was 0 if the video played out
	jne scenejoy
	
* scene timed out, so go to timed out scene
	mov @12(r5),r0
	jeq scenedone		* no next scene
	mov r0,@rowbase
	jmp scenelp			* go play this scene

* scene ended due to joystick, so determine if it was life or death	
scenejoy
	clr JOYMASK
	movb @5(r5),JOYMASK
	INV JOYMASK
	SZCB JOYMASK,JOYDAT
	JEQ scenedied
	
* looks like a safe move! go to safe scene
	mov @8(r5),r0
	jeq scenedone		* no next scene
	mov r0,@rowbase
	jmp scenelp			* go play this scene

* player entered a bad movement	
scenedied
	mov @10(r5),r0
	jeq scenedone		* no next scene
	mov r0,@rowbase
	jmp scenelp			* go play this scene

* no more scenes to play out!
scenedone
* check if this was a death scene
	movb @3(r5),r0		* death flag
	jeq nodeath
	
* yep, player died, so set flag and check for remaining lives...
* (the ressurrection sequence does the subtraction)
	movb @byte01,@justdied
	movb @lives,r0
	jne nodeath2		* not game over yet!
	
* it /is/ game over, the player done bit the big one
* play the game over scene...
	clr JOYMASK			* no input
	mov @scenebase,r5
	mov @4(r5),r8		* starting page of death scene
	mov @6(r5),r7		* number of frames
	bl @video
	
* now show the gameover screen for a few seconds
	li r0,>2a50
	li r1,240
	bl @showandpause
	
* and loop back around to the attract mode
	b @attract

* game is still playing, we jump here to basically just jump
* back to the scene selector
nodeath
* TODO: we need to mark a scene 'done' if we didn't die	

* we come here if we did die, but still have lives left
nodeath2
	b @GAMELOOP
	

	

	
	

	

	
	
	
	
	


* BCD lookup table for digits (top half only, bottom half add 32)
* each value from 0-99 returns a word representing two digits
BCDLOOKUP
	DATA >A7A7,>A7A8,>A7A9,>A7AA,>A7AB,>A7AC
	DATA >A7AD,>A7AE,>A7AF,>A7B0,>A8A7,>A8A8
	DATA >A8A9,>A8AA,>A8AB,>A8AC,>A8AD,>A8AE
	DATA >A8AF,>A8B0,>A9A7,>A9A8,>A9A9,>A9AA
	DATA >A9AB,>A9AC,>A9AD,>A9AE,>A9AF,>A9B0
	DATA >AAA7,>AAA8,>AAA9,>AAAA,>AAAB,>AAAC
	DATA >AAAD,>AAAE,>AAAF,>AAB0,>ABA7,>ABA8
	DATA >ABA9,>ABAA,>ABAB,>ABAC,>ABAD,>ABAE
	DATA >ABAF,>ABB0,>ACA7,>ACA8,>ACA9,>ACAA
	DATA >ACAB,>ACAC,>ACAD,>ACAE,>ACAF,>ACB0
	DATA >ADA7,>ADA8,>ADA9,>ADAA,>ADAB,>ADAC
	DATA >ADAD,>ADAE,>ADAF,>ADB0,>AEA7,>AEA8
	DATA >AEA9,>AEAA,>AEAB,>AEAC,>AEAD,>AEAE
	DATA >AEAF,>AEB0,>AFA7,>AFA8,>AFA9,>AFAA
	DATA >AFAB,>AFAC,>AFAD,>AFAE,>AFAF,>AFB0
	DATA >B0A7,>B0A8,>B0A9,>B0AA,>B0AB,>B0AC
	DATA >B0AD,>B0AE,>B0AF,>B0B0
	
* these are just really handy...
BYTE00
	BYTE >00
BYTE01
	BYTE >01
	
* temporarily putting scene data here so we can develop the scene playback
** First two words of a new scene are the ressurection start page and number of frames
** Next two words are the game over crumbling skeleton scene and number of frames
*
** start frame, frame count (byte), death? (byte), valid joystick (byte), good joystick (byte), 
** hint sprites, good scene, bad scene, timeout scene, score
A1DRAWBRIDGE
	DATA >0176,21												* ressurection
	DATA >026D,31												* game over
	
** scenes **
	
	DATA >018B,>5F00,>0000,HINTNONE,A01EA,A01EA,A01EA,49		* Intro through monsters approach
A01EA
	DATA >01EA,>0600,>0101,HINTFIRE,A01F0,A028C,A028C,0			* approaching, press sword
A01F0
	DATA >01F0,>0800,>0000,HINTNONE,A01F8,A01F8,A01F8,49		* swing sword
A01F8
	DATA >01F8,>0800,>1414,HINTUP,A0200,A028C,A028C,0			* move up/right needed
A0200
	DATA >0200,>5400,>0000,HINTNONE,A0255,A0255,A0255,49		* climb up thru crumbling vestible
A0255
	DATA >0255,>0600,>1604,HINTRIGHT,A025B,A029A,A02AC,0		* move right needed (up/left dies)
A025B
	DATA >025B,>1200,>0000,HINTNONE,0,0,0,49					* escaping (end scene)

** deaths **

A028C
	DATA >028C,>0Eff,>0000,HINTNONE,0,0,0,0						* caught by drawbridge monster
A029A
	DATA >029A,>12ff,>0000,HINTNONE,0,0,0,0						* falling into pit
A02AC
	DATA >02AC,>1eff,>0000,HINTNONE,0,0,0,0						* crushed by rocks

    END
    